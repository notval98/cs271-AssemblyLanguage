Microsoft (R) Macro Assembler Version 14.29.30139.0	    05/26/22 21:45:06
#Program Template     (Project5.asm			     Page 1 - 1


				TITLE Program Template     (Project5.asm)

				; Author: 
				; Last Modified:
				; OSU email address: ONID_ID@oregonstate.edu
				; Course number/section:   CS271 Section ???
				; Project Number:                 Due Date:
				; Description: This file is provided as a template from which you may work
				;              when developing assembly projects in CS271.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)

				; (insert constant definitions here)
 = 000000C8			ARRAYSIZE = 200	;max size of array
 = 0000000A			LO = 10
 = 0000001D			HI = 29

 00000000			.data
 00000000 47 65 6E 65 72	intro1		BYTE	"Generating, Sorting, and Counting Random Integers!", 0
	   61 74 69 6E 67
	   2C 20 53 6F 72
	   74 69 6E 67 2C
	   20 61 6E 64 20
	   43 6F 75 6E 74
	   69 6E 67 20 52
	   61 6E 64 6F 6D
	   20 49 6E 74 65
	   67 65 72 73 21
	   00
 00000033 50 72 6F 67 72	intro2		BYTE	"Programmed by Michael", 0
	   61 6D 6D 65 64
	   20 62 79 20 4D
	   69 63 68 61 65
	   6C 00
 00000049 54 68 69 73 20	intro3		BYTE	"This program generates 200 random numbers in the range [10 ... 29], displays the "
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 32 30
	   30 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 20 69 6E 20
	   74 68 65 20 72
	   61 6E 67 65 20
	   5B 31 30 20 2E
	   2E 2E 20 32 39
	   5D 2C 20 64 69
	   73 70 6C 61 79
	   73 20 74 68 65
	   20
 0000009A  6F 72 69 67 69				BYTE	"original list, sorts the list, displays the median value of the list, displays the "
	   6E 61 6C 20 6C
	   69 73 74 2C 20
	   73 6F 72 74 73
	   20 74 68 65 20
	   6C 69 73 74 2C
	   20 64 69 73 70
	   6C 61 79 73 20
	   74 68 65 20 6D
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 20 6F 66 20
	   74 68 65 20 6C
	   69 73 74 2C 20
	   64 69 73 70 6C
	   61 79 73 20 74
	   68 65 20
 000000ED  6C 69 73 74 20				BYTE	"list sorted in ascending order, then displays the number offset instances of each "
	   73 6F 72 74 65
	   64 20 69 6E 20
	   61 73 63 65 6E
	   64 69 6E 67 20
	   6F 72 64 65 72
	   2C 20 74 68 65
	   6E 20 64 69 73
	   70 6C 61 79 73
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 66
	   73 65 74 20 69
	   6E 73 74 61 6E
	   63 65 73 20 6F
	   66 20 65 61 63
	   68 20
 0000013F  67 65 6E 65 72				BYTE	"generated value, starting with the number of 10s.", 0
	   61 74 65 64 20
	   76 61 6C 75 65
	   2C 20 73 74 61
	   72 74 69 6E 67
	   20 77 69 74 68
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   31 30 73 2E 00

 00000171 59 6F 75 72 20	unsort		BYTE	"Your unsorted random numbers: ", 0
	   75 6E 73 6F 72
	   74 65 64 20 72
	   61 6E 64 6F 6D
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 00000190 54 68 65 20 6D	median		BYTE	"The median value of the array: ", 0
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 20 6F 66 20
	   74 68 65 20 61
	   72 72 61 79 3A
	   20 00
 000001B0 59 6F 75 72 20	sort		BYTE	"Your sorted random numbers: ",0
	   73 6F 72 74 65
	   64 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 3A 20 00
 000001CD 59 6F 75 72 20	instances	BYTE	"Your list of instances of each generated number, starting with the number of 10s: ", 0
	   6C 69 73 74 20
	   6F 66 20 69 6E
	   73 74 61 6E 63
	   65 73 20 6F 66
	   20 65 61 63 68
	   20 67 65 6E 65
	   72 61 74 65 64
	   20 6E 75 6D 62
	   65 72 2C 20 73
	   74 61 72 74 69
	   6E 67 20 77 69
	   74 68 20 74 68
	   65 20 6E 75 6D
	   62 65 72 20 6F
	   66 20 31 30 73
	   3A 20 00

 00000220 20 00			spaces		BYTE	" ", 0

 00000222 47 6F 6F 64 62	goodbye		BYTE	"Goodbye, and thanks for using this program!", 0
	   79 65 2C 20 61
	   6E 64 20 74 68
	   61 6E 6B 73 20
	   66 6F 72 20 75
	   73 69 6E 67 20
	   74 68 69 73 20
	   70 72 6F 67 72
	   61 6D 21 00

 0000024E  000000C8 [		array		DWORD	200 DUP(?)
	    00000000
	   ]
 0000056E  000000C8 [		countARRAY	DWORD	200 DUP(?)
	    00000000
	   ]
 0000088E 00000000		cArraySize	DWORD	0

 00000000			.code
 00000000			main PROC
					;introduce the program
 00000000  68 00000000 R		push OFFSET intro1
 00000005  68 00000033 R		push OFFSET intro2
 0000000A  68 00000049 R		push OFFSET intro3
 0000000F  E8 000000C9			call introduction

					;fill the array
 00000014  68 0000024E R		push OFFSET array
 00000019  68 000000C8			push ARRAYSIZE
 0000001E  6A 1D			push HI
 00000020  6A 0A			push LO
 00000022  E8 000000E9			call fillArray
 00000027  E8 00000000 E		call CrLf

					;display text for unsorted array
 0000002C  68 00000171 R		push OFFSET unsort
 00000031  E8 000000FD			call displayTitle
 00000036  E8 00000000 E		call CrLf

					;display the unsorted list
 0000003B  68 0000024E R		push OFFSET array
 00000040  68 000000C8			push ARRAYSIZE
 00000045  68 00000220 R		push OFFSET spaces
 0000004A  E8 000000F3			call displayArray ;display array call 1
 0000004F  E8 00000000 E		call CrLf
 00000054  E8 00000000 E		call CrLf

					;sort the array
 00000059  68 0000024E R		push OFFSET array
 0000005E  68 000000C8			push ARRAYSIZE
 00000063  E8 00000110			call sortList

					;display text for median
 00000068  68 00000190 R		push OFFSET median
 0000006D  E8 000000C1			call displayTitle

					;display median
 00000072  68 0000024E R		push OFFSET array
 00000077  68 000000C8			push ARRAYSIZE 
 0000007C  E8 0000013F			call displayMedian
 00000081  E8 00000000 E		call CrLf
 00000086  E8 00000000 E		call CrLf

					;display text for sorted array
 0000008B  68 000001B0 R		push OFFSET sort
 00000090  E8 0000009E			call displayTitle
 00000095  E8 00000000 E		call CrLf

					;display sorted list
 0000009A  68 0000024E R		push OFFSET array
 0000009F  68 000000C8			push ARRAYSIZE
 000000A4  68 00000220 R		push OFFSET spaces
 000000A9  E8 00000094			call displayArray ;display array call 2
 000000AE  E8 00000000 E		call CrLf
 000000B3  E8 00000000 E		call CrLf

					;display text for instances list
 000000B8  68 000001CD R		push OFFSET instances
 000000BD  E8 00000071			call displayTitle
 000000C2  E8 00000000 E		call CrLf

					;count the numbers in the array and store them in countArray
				;	push OFFSET array
				;	push OFFSET countArray
				;	push ARRAYSIZE
				;	push OFFSET cArraySize
				;	call countList

					;display the counted array
				;	push OFFSET countArray
				;	push cArraySize
				;	push OFFSET spaces
				;	call displayArray ;display array call 3
				;	call CrLf
				;	call CrLf

					;display goodbye message
 000000C7  68 00000222 R		push OFFSET goodbye
 000000CC  E8 00000062			call displayTitle
 000000D1  E8 00000000 E		CALL CrLf

					exit
 000000D6  6A 00	   *	    push   +000000000h
 000000D8  E8 00000000 E   *	    call   ExitProcess
 000000DD			main ENDP

				;introduces the program
				;receives: addresses of intro1, intro2, and intro3
				;registers changed: ebp, edx
 000000DD			introduction PROC
 000000DD  55				push ebp
 000000DE  8B EC			mov ebp, esp

 000000E0  8B 55 10			mov edx, [ebp+16]
 000000E3  E8 00000000 E		call WriteString
 000000E8  E8 00000000 E		call CrLf

 000000ED  8B 55 0C			mov edx, [ebp+12]
 000000F0  E8 00000000 E		call WriteString
 000000F5  E8 00000000 E		call CrLf
 000000FA  E8 00000000 E		call CrLf

 000000FF  8B 55 08			mov edx, [ebp+8]
 00000102  E8 00000000 E		call WriteString
 00000107  E8 00000000 E		call CrLf

 0000010C  5D				pop ebp
 0000010D  C2 000C			ret 12
 00000110			introduction ENDP

				;fills array with random numbers within the specified range
				;receives: address of array, array's size, upper and lower bounds
				;registers change: ebp, ecx, eax
 00000110			fillArray PROC
 00000110  55				push ebp
 00000111  8B EC			mov ebp, esp

 00000113  8B 75 14			mov esi, [ebp+20] ;address of array
 00000116  8B 4D 10			mov ecx, [ebp+16] ;arraySize

 00000119				getNumber:
					;generate a random number within our range
 00000119  8B 45 0C			mov eax, [ebp+12] ;hi
 0000011C  2B 45 08			sub eax, [ebp+8] ;lo
 0000011F  40				inc eax
 00000120  E8 00000000 E		call RandomRange
 00000125  03 45 08			add eax, [ebp+8] ;lo

					;store the random number in our next array position
 00000128  89 06			mov [esi], eax
 0000012A  83 C6 04			add esi, 4
 0000012D  E2 EA			loop getNumber

 0000012F  5D				pop ebp
 00000130  C2 0010			ret 16
 00000133			fillArray ENDP

				;dispay the title of the upcoming array
				;receives: address of title to display
				;registers changed: ebp, edx
 00000133			displayTitle PROC
 00000133  55				push ebp
 00000134  8B EC			mov ebp, esp

 00000136  8B 55 08			mov edx, [ebp+8] ;whichever string was pushed in main
 00000139  E8 00000000 E		call WriteString

 0000013E  5D				pop ebp
 0000013F  C2 0004			ret 4
 00000142			displayTitle ENDP

				;displays the called array
				;receives: address of array, size of the array, and spaces string
				;registers changed: ebp, ecx, edx, ebx, eax
 00000142			displayArray PROC
 00000142  55				push ebp
 00000143  8B EC			mov ebp, esp

					;setup the list and counter
 00000145  8B 75 10			mov esi, [ebp+16] ;address of array
 00000148  8B 4D 0C			mov ecx, [ebp+12] ;arraySize
 0000014B  8B 55 08			mov edx, [ebp+8] ;spaces

					;setup a columns counter
 0000014E  BB 00000014			mov ebx, 20

					;display the array
 00000153				L1:
 00000153  8B 06			mov eax, [esi]
 00000155  E8 00000000 E		call WriteDec
 0000015A  E8 00000000 E		call WriteString
 0000015F  83 C6 04			add esi, 4
 00000162  4B				dec ebx
 00000163  83 FB 00			cmp ebx, 0
 00000166  75 0A			jnz continue

					;if out of columns, make a new line
 00000168  BB 00000014			mov ebx, 20 ;reset columns counter
 0000016D  E8 00000000 E		call CrLf
 00000172				continue:
 00000172  E2 DF			loop L1

 00000174  5D				pop ebp
 00000175  C2 000C			ret 12
 00000178			displayArray ENDP

				;sort the list from lowest to highest
				;works by comparing the first number in the list to the rest of the numbers
				;if a number that is lower than the current number is found, the two are switched
				;and the sear5ch starts over from th beginning of that current number
				;once that number reaches an endpoint i.e. no more numbers to switch
				;the function move to the next number in the list and does the same
				;receives: address of array, array's size
				;registers cahnged: ebp, ecx, ebx, eax
 00000178			sortList PROC
 00000178  55				push ebp
 00000179  8B EC			mov ebp, esp

 0000017B  8B 4D 08			mov ecx, [ebp+8] ;arraySize
 0000017E  8B 75 0C			mov esi, [ebp+12] ;array
 00000181  83 E9 01			sub ecx, 1 ;keep the loop in bounds

 00000184				start:
 00000184  56				push esi
 00000185  BB 00000000			mov ebx, 0

 0000018A				compare: 
 0000018A  8B 06			mov eax, [esi] ;move the next number into eax
 0000018C  3B 46 04			cmp eax, [esi+4] ;compare numbers
 0000018F  7F 0A			jg switch ;jump here if numbers need to be switched
 00000191  43				inc ebx ;if no switch occurs, add ebx to the counter
 00000192  83 C6 04			add esi, 4
 00000195  3B D9			cmp ebx, ecx ;compare with what's left
 00000197  74 0E			je L1 ;if no more numbers loop around again
 00000199  EB EF			jmp compare

 0000019B				switch:
 0000019B  50				push eax
 0000019C  53				push ebx
 0000019D  E8 0000000F			call exchangeElements
 000001A2  5B				pop ebx
 000001A3  58				pop eax
 000001A4  5E				pop esi
 000001A5  EB DD			jmp start

					;if no switch, and at max, loop to the next number to be compared
 000001A7				L1:
 000001A7  5E				pop esi
 000001A8  83 C6 04			add esi, 4
 000001AB  E2 D7			loop start

 000001AD  5D				pop ebp
 000001AE  C2 0008			ret 8 
 000001B1			sortList ENDP

				;swaps elements at current ESI position with element assuming it is a DWORD
				;at next position +4 address
				;recieves: esi pointed to array position (must be setup before calling)
				;registers changed: ebp, eax, ebx
 000001B1			exchangeElements PROC
 000001B1  55				push ebp
 000001B2  8B EC			mov ebp, esp

					;swap elements in array
 000001B4  8B 06			mov eax, [esi] ;current number
 000001B6  8B 5E 04			mov ebx, [esi+4] ;next number in array
 000001B9  89 1E			mov [esi], ebx
 000001BB  89 46 04			mov [esi+4], eax

 000001BE  5D				pop ebp
 000001BF  C3				ret
 000001C0			exchangeElements ENDP

				;displays the median in an array
				;receives: array, array's total size, address of median variable
				;registers changed: ebp, ebx, edx, eax
 000001C0			displayMedian PROC
 000001C0  55				push ebp
 000001C1  8B EC			mov ebp, esp
 000001C3  BB 00000002			mov ebx, 2
 000001C8  8B 75 0C			mov esi, [ebp+12] ;array

					;check if list size is even or odd
 000001CB  BA 00000000			mov edx, 0
 000001D0  8B 45 08			mov eax, [ebp+8] ;arraySize
 000001D3  99				cdq
 000001D4  F7 FB			idiv ebx
 000001D6  8B C8			mov ecx, eax ;move into the counter for following loops
 000001D8  83 FA 00			cmp edx, 0 ;if 0, arraySize is even
 000001DB  74 0E			je L2

					;odd array
 000001DD  8B C8			mov ecx, eax
 000001DF  83 E9 01			sub ecx, 1
 000001E2				L1:
 000001E2  83 C6 04			add esi, 4
 000001E5  E2 FB			loop L1
 000001E7  8B 06			mov eax, [esi]
 000001E9  EB 17			jmp continue

					;even array
 000001EB				L2:
 000001EB  83 C6 04			add esi, 4
 000001EE  E2 FB			loop L2
					;if no direct media, combine two middle numebrs to get average of those
 000001F0  8B 06			mov eax, [esi]
 000001F2  03 46 FC			add eax, [esi-4]
 000001F5  BB 00000002			mov ebx, 2
 000001FA  BB 00000002			mov ebx, 2
 000001FF  99				cdq
 00000200  F7 FB			idiv ebx

					;display the new median
 00000202				continue: 
 00000202  E8 00000000 E		call WriteDec

 00000207  5D				pop ebp
 00000208  C2 0008			ret 8
 0000020B			displayMedian ENDP

				;counts the number of instances of each number
				;receives: address of array, array's size
				;registers changed: ebp, ecx, eax, ebx, edx
 0000020B			countList PROC

 0000020B			countList ENDP

 0000020B			addToList PROC
					
 0000020B			addToList ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30139.0	    05/26/22 21:45:06
#Program Template     (Project5.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000892 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000020B Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
addToList  . . . . . . . . . . .	P Near	 0000020B _TEXT	Length= 00000000 Public STDCALL
countList  . . . . . . . . . . .	P Near	 0000020B _TEXT	Length= 00000000 Public STDCALL
displayArray . . . . . . . . . .	P Near	 00000142 _TEXT	Length= 00000036 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000153 _TEXT	
  continue . . . . . . . . . . .	L Near	 00000172 _TEXT	
displayMedian  . . . . . . . . .	P Near	 000001C0 _TEXT	Length= 0000004B Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000001E2 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000001EB _TEXT	
  continue . . . . . . . . . . .	L Near	 00000202 _TEXT	
displayTitle . . . . . . . . . .	P Near	 00000133 _TEXT	Length= 0000000F Public STDCALL
exchangeElements . . . . . . . .	P Near	 000001B1 _TEXT	Length= 0000000F Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 00000110 _TEXT	Length= 00000023 Public STDCALL
  getNumber  . . . . . . . . . .	L Near	 00000119 _TEXT	
introduction . . . . . . . . . .	P Near	 000000DD _TEXT	Length= 00000033 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000DD Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 00000178 _TEXT	Length= 00000039 Public STDCALL
  start  . . . . . . . . . . . .	L Near	 00000184 _TEXT	
  compare  . . . . . . . . . . .	L Near	 0000018A _TEXT	
  switch . . . . . . . . . . . .	L Near	 0000019B _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 000001A7 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 000000C8h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 0000001Dh   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 0000000Ah   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 0000024E _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cArraySize . . . . . . . . . . .	DWord	 0000088E _DATA	
countARRAY . . . . . . . . . . .	DWord	 0000056E _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 00000222 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instances  . . . . . . . . . . .	Byte	 000001CD _DATA	
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 00000033 _DATA	
intro3 . . . . . . . . . . . . .	Byte	 00000049 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
median . . . . . . . . . . . . .	Byte	 00000190 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sort . . . . . . . . . . . . . .	Byte	 000001B0 _DATA	
spaces . . . . . . . . . . . . .	Byte	 00000220 _DATA	
unsort . . . . . . . . . . . . .	Byte	 00000171 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
